export default function () {
    console.log('test!');
};
/**
 * Make a partial word for a bit array.
 * @param {Number} len The number of bits in the word.
 * @param {Number} x The bits.
 * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.
 * @return {Number} The partial word.
 */
export function partial(len, x, end) {
    if (end === void 0) { end = 0; }
    if (len === 32) {
        return x;
    }
    return (end ? x | 0 : x << (32 - len)) + len * 0x10000000000;
}
/**
 * Concatenate two bit arrays.
 * @param {bitArray} a1 The first array.
 * @param {bitArray} a2 The second array.
 * @return {bitArray} The concatenation of a1 and a2.
 */
export function concat(a1, a2) {
    if (a1.length === 0 || a2.length === 0) {
        return a1.concat(a2);
    }
    var last = a1[a1.length - 1], shift = getPartial(last);
    if (shift === 32) {
        return a1.concat(a2);
    }
    else {
        return shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));
    }
}
/**
 * Get the number of bits used by a partial word.
 * @param {Number} x The partial word.
 * @return {Number} The number of bits used by the partial word.
 */
function getPartial(x) {
    return Math.round(x / 0x10000000000) || 32;
}
/** Shift an array right.
 * @param {bitArray} a The array to shift.
 * @param {Number} shift The number of bits to shift.
 * @param {Number} [carry=0] A byte to carry in
 * @param {bitArray} [out=[]] An array to prepend to the output.
 * @private
 */
function shiftRight(a, shift, carry, out) {
    if (carry === void 0) { carry = 0; }
    if (out === void 0) { out = []; }
    var i, last2 = 0, shift2;
    if (out === undefined) {
        out = [];
    }
    for (; shift >= 32; shift -= 32) {
        out.push(carry);
        carry = 0;
    }
    if (shift === 0) {
        return out.concat(a);
    }
    for (i = 0; i < a.length; i++) {
        out.push(carry | (a[i] >>> shift));
        carry = a[i] << (32 - shift);
    }
    last2 = a.length ? a[a.length - 1] : 0;
    shift2 = getPartial(last2);
    out.push(partial((shift + shift2) & 31, shift + shift2 > 32 ? carry : out.pop(), 1));
    return out;
}
/**
 * Find the length of an array of bits.
 * @param {bitArray} a The array.
 * @return {Number} The length of a, in bits.
 */
export function bitLength(a) {
    var l = a.length, x;
    if (l === 0) {
        return 0;
    }
    x = a[l - 1];
    return (l - 1) * 32 + getPartial(x);
}
/**
 * Truncate an array.
 * @param {bitArray} a The array.
 * @param {Number} len The length to truncate to, in bits.
 * @return {bitArray} A new array, truncated to len bits.
 */
export function clamp(a, len) {
    if (a.length * 32 < len) {
        return a;
    }
    a = a.slice(0, Math.ceil(len / 32));
    var l = a.length;
    len = len & 31;
    if (l > 0 && len) {
        a[l - 1] = partial(len, a[l - 1] & (0x80000000 >> (len - 1)), 1);
    }
    return a;
}
//# sourceMappingURL=bitarray.js.map